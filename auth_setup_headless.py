#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced - Google Authentication Setup (Headless)
Sistema de configura√ß√£o de autentica√ß√£o Google para ambientes sem navegador
"""

import os
import sys
import json
import logging
from pathlib import Path
from typing import Optional, Dict, Any
from dotenv import load_dotenv

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class GoogleAuthSetupHeadless:
    """Configurador de autentica√ß√£o Google para ambientes headless"""
    
    def __init__(self):
        """Inicializa o configurador"""
        load_dotenv('.env')
        
        self.credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
        self.token_file = os.getenv('GOOGLE_AUTH_TOKEN_PATH', 'token.json')
        
        self.client_id = os.getenv('GOOGLE_CLIENT_ID')
        self.client_secret = os.getenv('GOOGLE_CLIENT_SECRET')
        self.project_id = os.getenv('GOOGLE_PROJECT_ID')
        
        logger.info("üîß Google Auth Setup Headless inicializado")
    
    def validate_environment(self) -> bool:
        """Valida configura√ß√£o de ambiente"""
        logger.info("üîç Validando configura√ß√£o...")
        
        required_vars = {
            'GOOGLE_CLIENT_ID': self.client_id,
            'GOOGLE_CLIENT_SECRET': self.client_secret,
            'GOOGLE_PROJECT_ID': self.project_id
        }
        
        all_valid = True
        for var_name, var_value in required_vars.items():
            if var_value:
                logger.info(f"‚úÖ {var_name}: configurada")
            else:
                logger.error(f"‚ùå {var_name}: n√£o configurada")
                all_valid = False
        
        if Path(self.credentials_file).exists():
            logger.info(f"‚úÖ Arquivo de credenciais: {self.credentials_file}")
        else:
            logger.error(f"‚ùå Arquivo de credenciais n√£o encontrado: {self.credentials_file}")
            all_valid = False
        
        return all_valid
    
    def create_manual_token_template(self) -> str:
        """Cria template para token manual"""
        template = {
            "token": "YOUR_ACCESS_TOKEN_HERE",
            "refresh_token": "YOUR_REFRESH_TOKEN_HERE",
            "token_uri": "https://oauth2.googleapis.com/token",
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/youtube.readonly",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/analytics.readonly"
            ]
        }
        
        template_file = 'token_template.json'
        with open(template_file, 'w') as f:
            json.dump(template, f, indent=2)
        
        return template_file
    
    def generate_auth_url(self) -> str:
        """Gera URL de autentica√ß√£o manual"""
        from urllib.parse import urlencode
        
        params = {
            'client_id': self.client_id,
            'redirect_uri': 'urn:ietf:wg:oauth:2.0:oob',
            'scope': ' '.join([
                'https://www.googleapis.com/auth/cloud-platform',
                'https://www.googleapis.com/auth/drive.readonly',
                'https://www.googleapis.com/auth/youtube.readonly',
                'https://www.googleapis.com/auth/gmail.readonly',
                'https://www.googleapis.com/auth/analytics.readonly'
            ]),
            'response_type': 'code',
            'access_type': 'offline',
            'include_granted_scopes': 'true'
        }
        
        auth_url = f"https://accounts.google.com/o/oauth2/auth?{urlencode(params)}"
        return auth_url
    
    def setup_manual_auth(self):
        """Configura autentica√ß√£o manual"""
        print("\nüîß CONFIGURA√á√ÉO MANUAL DE AUTENTICA√á√ÉO GOOGLE")
        print("=" * 60)
        
        if not self.validate_environment():
            print("‚ùå Configura√ß√£o de ambiente inv√°lida")
            return False
        
        # Gera URL de autentica√ß√£o
        auth_url = self.generate_auth_url()
        
        print("\nüìã INSTRU√á√ïES PARA AUTENTICA√á√ÉO MANUAL:")
        print("-" * 40)
        print("1. Abra o seguinte link em um navegador:")
        print(f"\n{auth_url}\n")
        print("2. Fa√ßa login com sua conta Google")
        print("3. Autorize o aplicativo")
        print("4. Copie o c√≥digo de autoriza√ß√£o fornecido")
        print("5. Use o c√≥digo para obter tokens de acesso")
        
        # Cria template
        template_file = self.create_manual_token_template()
        print(f"\nüìÅ Template criado: {template_file}")
        print("   Edite este arquivo com seus tokens reais")
        
        print("\nüí° ALTERNATIVAS:")
        print("- Execute em um ambiente com navegador")
        print("- Use Google Cloud Shell")
        print("- Configure tokens manualmente via API")
        
        return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ ARQV30 Enhanced - Configura√ß√£o Google (Headless)")
    print("=" * 60)
    
    setup = GoogleAuthSetupHeadless()
    setup.setup_manual_auth()

if __name__ == "__main__":
    main()